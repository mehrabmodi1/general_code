clear all
close all

direc = 'D:\Data\Janelia\Patch\Data_MM\thacq_files\';
%list_file = 'cell_list_ABs.xls';
%list_file = 'cell_list_ApBp.xls';
%list_file = 'cell_list_G.xls';
list_file = 'cell_list_unknown.xls';
%list_file = 'cell_list_unknown_unstained.xls';

odor_list = {'3-Octanol', ...
             '1-Hexanol', ...
             'Pentyl acetate', ...
             '4-Methylcyclohexanol', ...
             '2-Heptanone', ...
             'Diethyl succinate', ...
             'Ethyl lactate', ...
             '1-Octen-3-ol', ...
             'Geranyl acetate', ...
             'Ethyl acetate', ...
             'Empty' ...
            };

color_vec = load('C:\Users\Mehrab\Google Drive\Backup\Stuff\CSHL\Glenn lab\Code\std_color_vec.txt');

[del del1 cell_list] = xlsread([direc list_file]);

n_cells = size(cell_list, 1);
n_odors = size(odor_list, 2);

plot_spike_trace = 0;
plot_single_cell_stuff = 0;

saved_pre_sigs = [];
saved_on_sigs = [];
saved_sus_sigs = [];
saved_off_sigs = [];
sig_trs = [];

plotting_on = 1;


for cell_n = 1:n_cells
    trial_counter = 1;
    cell_path = cell_list{cell_n, 1};
    cell_path = [cell_path, '\'];
    cell_name = cell_list{cell_n, 2};
    
    try

        cell_data = load([cell_path, cell_name, '.mat']);
        spike_data = load([cell_path, cell_name, '_spike.mat']);
        bad_tr_list = load([cell_path, cell_name, '_selection.mat']);
        bad_tr_list = bad_tr_list.rejectedsweeps;
        sf = cell_data.Data_1.parameter.ai_sr;          %AI sampling rate
    catch
        continue
    end
    n_trials = length(fieldnames(cell_data)); 
    
    %initialising stim table, data table
    stim_mat = zeros(n_trials, 3) + nan;        %trial_n x [odor number, odor duration, odor onset time]
    sp_data_mat = zeros(800000, n_trials) + nan;
    sp_wav_mat = [];        
    %loop to load each trial into memory
    for trial_n = 1:n_trials
        
        %skipping trials rejected in THview
        if bad_tr_list(trial_n) == 1
            continue
        else
        end
            
        eval(['curr_data = cell_data.Data_' int2str(trial_n) ';']);
        
        try
            eval(['sp_times = spike_data.Spike_' int2str(trial_n) ';']);
            sp_datapoints = sp_times(:, 1).*sf;
        catch
            sp_times = [];
            sp_datapoints = [];
        end
        
        %adding to stim table
        for odor_ni = 1:n_odors
            list_name = odor_list{1, odor_ni};
            curr_name = curr_data.odor;
            if strcmp(list_name, curr_name) == 1
                curr_odor_n = odor_ni;              %current odor number
                stim_mat(trial_n, 1) = curr_odor_n;
                break
            else
            
            end
        end
        
        stim_mat(trial_n, 2) = curr_data.parameter.odorD;       %odor duration
        stim_mat(trial_n, 3) = curr_data.parameter.preO;        %odor onset time
        stim_mat(trial_n, 4) = curr_data.paratable{2, 3};       %trial duration
        
        v_trace = curr_data.data.voltage;
        sp_vec = zeros((curr_data.parameter.dur.*sf), 1);
        try
            sp_vec(round(sp_datapoints), 1) = 1;
        catch
            keyboard
        end
        sp_data_mat(1:length(sp_vec), trial_n) = sp_vec;
        
        %% Modelling the Ca curve generated by the current V trace
        if curr_data.parameter.odorD < 60
            continue
        else
        end
            
        %CaNew = (1 - fr_time./tau).*Ca + (fr_time./tau)Cbaseline + sp_ht.*n_sp;
        %%from Vogelstein, Paninski et al, J neurophys; DOI: 10.1152/jn.01073.2009
        V_trace = curr_data.data.voltage.*1000/curr_data.amplifier.Vgain;    %in mV
        V_trace_orig = V_trace;
        win_width = round(.2./(1/sf));
        V_trace = tsmovavg_m(V_trace,'s', win_width, 1);
        V_trace(1:(win_width - 1)) = V_trace_orig(1:(win_width - 1));
        tau = 1.8;                   %Ca decay constant in s, obtained empirically from 1s imaging response data
        time_step = 1./sf;          %time step in V trace in s
        Cbaseline = .1;             %baseline level of simulated Ca signal
        Ca = Cbaseline;             %initialising Ca signal at t = 0
        Ca_sp = Cbaseline;             %initialising Ca signal at t = 0
        n_points = size(V_trace, 1);%n datapoints in current trial
        Vscale = 1./60;             %THIS IS TRICKY; currently mapping -60 mV to 0 mV to 0 to 1 AU. ie 1 mV = 1 AU 
        Ca_max = 1;                 %peak Ca-signal level, dictated by Ca reversal
        
        Ca_sp_inj = 1;                  %Ca-signal injected at each spike time.
        stim_time = curr_data.parameter.preO;
        stim_point = stim_time.*sf;
        Vbaseline = nanmean(V_trace(1:stim_point));
        
        
        
        saved_Ca = zeros(1, n_points) + nan;
        saved_Ca_sp = zeros(1, n_points) + nan;
        n_spikes = size(sp_times, 1);
        curr_spike = 1;
        for t_step = 1:n_points
            Vin = V_trace(t_step);          %input for membrane voltage dependent signal
            
            if isempty(sp_times) == 1
                n_sp = 0;
            elseif isempty(sp_times) == 0 && curr_spike < n_spikes
                curr_sp_time = sp_times(curr_spike, 1).*sf;
                if t_step >= curr_sp_time
                    n_sp = 1;
                    curr_spike = curr_spike + 1;
                    
                elseif t_step < curr_sp_time
                    n_sp = 0;
                end
            else
                n_sp = 0;
            end
            
            
            %ensuring Ca-signal is only added by memV, not subtracted by it since VGCCs are not pumps.
            if Vin < Vbaseline
                Vin = Vbaseline;      %for Vin = -60, scaled added Ca-signal is 0.
            else
            end
            
            %Ca-trace generation #1: membrane voltage converted to injected Ca-signal
            CaNew = ( (1 - time_step./tau).*Ca) + ( (time_step./tau).*Cbaseline) + ((Vin - Vbaseline).*Vscale);%.*(Ca_max-Ca));
            saved_Ca(1, t_step) = CaNew;
            Ca = CaNew;
            
            
        end
        
        
        
        if plotting_on == 1
            curr_color = color_vec(2, :);
            stim_frames = [stim_time.*sf, (stim_time + 60).*sf];
            
            figure(1)
            t_vec = curr_data.data.time;
            plot(V_trace, 'b', 'LineWidth', 1)
            %title('Membrane voltage and simulated Vm-scaled Ca-signal injection')
            xlabel('time (s)')
            ylabel('membrane voltage (mV)')
            add_stim_shading(1, stim_frames, 0.20, curr_color)
            set_xlabels_time(1, 1./sf, .5)
            
            figure(2)
            plot(saved_Ca, 'g', 'LineWidth', 1)
            xlabel('time (s)')
            ylabel('simulated Ca-signal (AU)')
            add_stim_shading(2, stim_frames, 0.20, curr_color)
            set_xlabels_time(2, 1./sf, .5)
            
            
            keyboard
        else
        end
        
        
        %% keeping track of area under simulated Ca-curve
        saved_Ca_curves(:, trial_counter) = [saved_Ca'];
        disp(['cell ' int2str(cell_n), ', trial ', int2str(trial_n), ', of ' int2str(n_cells) ' cells.'])
        trial_counter = trial_counter + 1;
    end
    
    %% Statistical testing
    pre_bin = [1./sf, (3.*sf - 1)];           %in sample points
    on_bin = [3.*sf, (8.*sf - 1)];            %on period sample points (5s window?)
    sus_bin = [8.*sf, (63.*sf - 1)];          %sus period sample points
    off_bin = [63.*sf, (65.*sf - 1)];         %off period sample points

    %calculating area under Ca-signal curves for plotting
    pre_sigs = mean(saved_Ca_curves(pre_bin(1):pre_bin(2), :), 1);          %mean spikes per second during pre time window
    on_sigs = mean(saved_Ca_curves(on_bin(1):on_bin(2), :), 1);             %mean spikes per second during on time window
    sus_sigs = mean(saved_Ca_curves(sus_bin(1):sus_bin(2), :), 1);          %mean spikes per second during sus time window
    off_sigs = mean(saved_Ca_curves(off_bin(1):off_bin(2), :), 1);          %mean spikes per second during off time window

    %building list of repeat sets and analysing each set of repeats
    long_od_trs = find(stim_mat(:, 2) == 60);
    sub_stim_mat = stim_mat(long_od_trs, :);
    long_od_list = unique(stim_mat(:, 1));
    
    for long_od_n = 1:length(long_od_list)
        long_od_ni = long_od_list(long_od_n);
        curr_trs = find(sub_stim_mat(:, 1) == long_od_ni);
        
        %statistical testing for sig diff in current trial
        [h1, p1] = ttest2(pre_sigs(curr_trs), on_sigs(curr_trs));      %pre vs sus, Ca conv
        [h2, p2] = ttest2(pre_sigs(curr_trs), sus_sigs(curr_trs));      %pre vs sus, Ca spike
        [h3, p3] = ttest2(pre_sigs(curr_trs), off_sigs(curr_trs));      %pre vs sus, Ca Vm
        
        saved_pre_sigs = [saved_pre_sigs; nanmean(pre_sigs(curr_trs))];
        saved_on_sigs = [saved_on_sigs; nanmean(on_sigs(curr_trs))];
        saved_sus_sigs = [saved_sus_sigs; nanmean(sus_sigs(curr_trs))];
        saved_off_sigs = [saved_off_sigs; nanmean(off_sigs(curr_trs))];

        

        sig_trs = [sig_trs; h1, h2, h3];
        
    end
    
        
    
end
    
%% Plotting summary analysis plots

figure(1)
plot(saved_pre_sigs, saved_sus_sigs, 'O', 'MarkerFaceColor', [.4, .6, .9], 'MarkerSize', 8, 'Color', [.4, .6, .9])
hold on
max_rate = max([saved_pre_sigs; saved_sus_sigs]);
plot([0, max_rate], [0, max_rate], '-.', 'Color', [.75, .75, .75], 'LineWidth', 3)
sig_pts = find(sig_trs(:, 2) == 1);
plot(saved_pre_sigs(sig_pts), saved_sus_sigs(sig_pts), 'O', 'MarkerFaceColor', [.9, .2, .2], 'MarkerSize', 8, 'Color', [.4, .6, .9])
xlabel('mean Ca-signal baseline period (AU)')
ylabel('mean Ca-signal sustained period (AU)')
hold off
       