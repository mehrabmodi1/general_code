clear all
close all

direc = 'D:\Data\Janelia\Patch\Data_MM\thacq_files\';
%list_file = 'cell_list_ABs.xls';
%list_file = 'cell_list_ApBp.xls';
%list_file = 'cell_list_G.xls';
list_file = 'cell_list_unknown.xls';
%list_file = 'cell_list_unknown_unstained.xls';

odor_list = {'3-Octanol', ...
             '1-Hexanol', ...
             'Pentyl acetate', ...
             '4-Methylcyclohexanol', ...
             '2-Heptanone', ...
             'Diethyl succinate', ...
             'Ethyl lactate', ...
             '1-Octen-3-ol', ...
             'Geranyl acetate', ...
             'Ethyl acetate', ...
             'Empty' ...
            };



[del del1 cell_list] = xlsread([direc list_file]);

n_cells = size(cell_list, 1);
n_odors = size(odor_list, 2);

plot_spike_trace = 0;
plot_single_cell_stuff = 0;

saved_pre_sigs = [];
saved_on_sigs = [];
saved_sus_sigs = [];
saved_off_sigs = [];
sig_trs = [];

plotting_on = 1;

for cell_n = 1:n_cells
    cell_path = cell_list{cell_n, 1};
    cell_path = [cell_path, '\'];
    cell_name = cell_list{cell_n, 2};
    
    try

        cell_data = load([cell_path, cell_name, '.mat']);
        spike_data = load([cell_path, cell_name, '_spike.mat']);
        bad_tr_list = load([cell_path, cell_name, '_selection.mat']);
        bad_tr_list = bad_tr_list.rejectedsweeps;
        sf = cell_data.Data_1.parameter.ai_sr;          %AI sampling rate
    catch
        continue
    end
    n_trials = length(fieldnames(cell_data)); 
    
    %initialising stim table, data table
    stim_mat = zeros(n_trials, 3) + nan;        %trial_n x [odor number, odor duration, odor onset time]
    sp_data_mat = zeros(800000, n_trials) + nan;
    sp_wav_mat = [];        
    %loop to load each trial into memory
    for trial_n = 1:n_trials
        
        %skipping trials rejected in THview
        if bad_tr_list(trial_n) == 1
            continue
        else
        end
            
        eval(['curr_data = cell_data.Data_' int2str(trial_n) ';']);
        
        try
            eval(['sp_times = spike_data.Spike_' int2str(trial_n) ';']);
            sp_datapoints = sp_times(:, 1).*sf;
        catch
            sp_times = [];
            sp_datapoints = [];
        end
        
        %adding to stim table
        for odor_ni = 1:n_odors
            list_name = odor_list{1, odor_ni};
            curr_name = curr_data.odor;
            if strcmp(list_name, curr_name) == 1
                curr_odor_n = odor_ni;              %current odor number
                stim_mat(trial_n, 1) = curr_odor_n;
                break
            else
            
            end
        end
        
        stim_mat(trial_n, 2) = curr_data.parameter.odorD;       %odor duration
        stim_mat(trial_n, 3) = curr_data.parameter.preO;        %odor onset time
        stim_mat(trial_n, 4) = curr_data.paratable{2, 3};       %trial duration
        
        v_trace = curr_data.data.voltage;
        sp_vec = zeros((curr_data.parameter.dur.*sf), 1);
        try
            sp_vec(round(sp_datapoints), 1) = 1;
        catch
            keyboard
        end
        sp_data_mat(1:length(sp_vec), trial_n) = sp_vec;
        
        %% Modelling the Ca curve generated by the current V trace
        if curr_data.parameter.odorD < 60
            continue
        else
        end
            
        %CaNew = (1 - fr_time./tau).*Ca + (fr_time./tau)Cbaseline + sp_ht.*n_sp;
        %%from Vogelstein, Paninski et al, J neurophys; DOI: 10.1152/jn.01073.2009
        V_trace = curr_data.data.voltage.*1000/curr_data.amplifier.Vgain;    %in mV
        V_trace_orig = V_trace;
        win_width = round(.2./(1/sf));
        V_trace = tsmovavg_m(V_trace,'s', win_width, 1);
        V_trace(1:(win_width - 1)) = V_trace_orig(1:(win_width - 1));
        tau = 1.8;                   %Ca decay constant in s, obtained empirically from 1s imaging response data
        time_step = 1./sf;          %time step in V trace in s
        Cbaseline = .1;             %baseline level of simulated Ca signal
        Ca = Cbaseline;             %initialising Ca signal at t = 0
        Ca_sp = Cbaseline;             %initialising Ca signal at t = 0
        n_points = size(V_trace, 1);%n datapoints in current trial
        Vscale = 1./60;             %THIS IS TRICKY; currently mapping -60 mV to 0 mV to 0 to 1 AU. ie 1 mV = 1 AU 
        Ca_max = 1;                 %peak Ca-signal level, dictated by Ca reversal
        
        Ca_sp_inj = 1;                  %Ca-signal injected at each spike time.
        stim_time = curr_data.parameter.preO;
        stim_point = stim_time.*sf;
        Vbaseline = nanmean(V_trace(1:stim_point));
        
        
        
        saved_Ca = zeros(1, n_points) + nan;
        saved_Ca_sp = zeros(1, n_points) + nan;
        n_spikes = size(sp_times, 1);
        curr_spike = 1;
        for t_step = 1:n_points
            Vin = V_trace(t_step);          %input for membrane voltage dependent signal
            
            if isempty(sp_times) == 1
                n_sp = 0;
            elseif isempty(sp_times) == 0 && curr_spike < n_spikes
                curr_sp_time = sp_times(curr_spike, 1).*sf;
                if t_step >= curr_sp_time
                    n_sp = 1;
                    curr_spike = curr_spike + 1;
                    
                elseif t_step < curr_sp_time
                    n_sp = 0;
                end
            else
                n_sp = 0;
            end
            
            
            %ensuring Ca-signal is only added by memV, not subtracted by it since VGCCs are not pumps.
            if Vin < Vbaseline
                Vin = Vbaseline;      %for Vin = -60, scaled added Ca-signal is 0.
            else
            end
            
            %Ca-trace generation #1: membrane voltage converted to injected Ca-signal
            CaNew = ( (1 - time_step./tau).*Ca) + ( (time_step./tau).*Cbaseline) + ((Vin - Vbaseline).*Vscale);%.*(Ca_max-Ca));
            saved_Ca(1, t_step) = CaNew;
            Ca = CaNew;
            
            %Ca-trace generation #2: Ca-signal injected for each spike
            CaNew_sp = ( (1 - time_step./tau).*Ca_sp) + ( (time_step./tau).*Cbaseline) + (Ca_sp_inj.*n_sp);%.*(Ca_max-Ca));
            saved_Ca_sp(1, t_step) = CaNew_sp;
            Ca_sp = CaNew_sp;
        end
        
        %Ca-trace generation #3: Convolving a standard Ca-kernel with V-trace
        %creating Ca-kernel
        n_steps = 5.*tau.*sf;       %the length of the kernel is a multiple the Ca-tau used.
        if rem(n_steps, 2) == 0
            n_steps = n_steps + 1;
        else
        end
        kernel = zeros(1, n_steps) + nan;
        Ca_k = Cbaseline;
        for step_n = 1:n_steps
            if step_n == 10
                n_sp = 1;
            elseif step_n ~= 10
                n_sp = 0;
            end
            
            CaNew_k = ( (1 - time_step./tau).*Ca_k) + ( (time_step./tau).*Cbaseline) + (Ca_sp_inj.*n_sp);%.*(Ca_max-Ca));
            kernel(1, step_n) = CaNew_k;
            Ca_k = CaNew_k;
        end
        
        Ca_conv = conv( (V_trace + 60), kernel);
        Ca_conv1 = Ca_conv;
        
        %since convolution adds on half the kernel at each end, clipping
        %these points away.
        clip_width = (length(kernel) - 1)./2;
        Ca_conv(1:clip_width) = [];
        Ca_conv((end-clip_width + 1):end) = [];
        
        if plotting_on == 1
            figure(1)
            t_vec = curr_data.data.time;
            subplot(2, 1, 1)
            plot(t_vec, V_trace, 'b', 'LineWidth', 1)
             title('Membrane voltage and simulated Vm-scaled Ca-signal injection')
            xlabel('time (s)')
            ylabel('membrane voltage (mV)')
            subplot(2, 1, 2)
            plot(t_vec, saved_Ca, 'g', 'LineWidth', 1)
            xlabel('time (s)')
            ylabel('simulated Ca-signal (AU)')


            figure(2)
            subplot(2, 1, 1)
            plot(t_vec, V_trace, 'b', 'LineWidth', 1)
            title('Recorded membrane voltage and simulated spike-triggered Ca-signal injection')
            xlabel('time (s)')
            ylabel('membrane voltage (mV)')
            subplot(2, 1, 2)
            plot(t_vec, saved_Ca_sp, 'g', 'LineWidth', 1)
            xlabel('time (s)')
            ylabel('simulated Ca-signal (AU)') 



            figure(3)
            subplot(2, 1, 1)
            plot(t_vec, V_trace, 'b', 'LineWidth', 1)
            title('Recorded membrane voltage and Ca-signal kernel convolved trace')
            xlabel('time (s)')
            ylabel('membrane voltage (mV)')
            subplot(2, 1, 2)
            plot(t_vec, Ca_conv, 'g', 'LineWidth', 1)
            xlabel('time (s)')
            ylabel('simulated Ca-signal (AU)') 
            keyboard
        else
        end
        
        
        %% keeping track of area under simulated Ca-curve in various time bins
        saved_Ca_curves = [Ca_conv, saved_Ca_sp', saved_Ca'];
        
        pre_bin = [1./sf, (3.*sf - 1)];           %in sample points
        on_bin = [3.*sf, (8.*sf - 1)];            %on period sample points (5s window?)
        sus_bin = [8.*sf, (63.*sf - 1)];          %sus period sample points
        off_bin = [63.*sf, (65.*sf - 1)];         %off period sample points

        %calculating area under Ca-signal curves for plotting
        pre_sigs = mean(saved_Ca_curves(pre_bin(1):pre_bin(2), :));          %mean spikes per second during pre time window
        on_sigs = mean(saved_Ca_curves(on_bin(1):on_bin(2), :));             %mean spikes per second during on time window
        sus_sigs = mean(saved_Ca_curves(sus_bin(1):sus_bin(2), :));          %mean spikes per second during sus time window
        off_sigs = mean(saved_Ca_curves(off_bin(1):off_bin(2), :));          %mean spikes per second during off time window
        
        saved_pre_sigs = [saved_pre_sigs; pre_sigs];
        saved_on_sigs = [saved_on_sigs; on_sigs];
        saved_sus_sigs = [saved_sus_sigs; sus_sigs];
        saved_off_sigs = [saved_off_sigs; off_sigs];
        
        
        %calculating time-binned area vectors of Ca-signal curves for significance testing
        %defining vectors of bins
        pre_bins = [1./sf:(.5.*sf):(3.*sf - 1)];           %in sample points
        on_bins = [3.*sf:(.5.*sf):(8.*sf - 1)];            %on period sample points (5s window?)
        sus_bins = [8.*sf:(.5.*sf):(63.*sf - 1)];          %sus period sample points
        off_bins = [63.*sf:(.5.*sf):(65.*sf - 1)];         %off period sample points
        
        %calculating pre-area vecs
        pre_area_vecs = zeros((length(pre_bins)-1), 3);
        for pre_bin_n = 1:(length(pre_bins)-1)
            bin_ends = [pre_bins(pre_bin_n), pre_bins(pre_bin_n + 1)];
            pre_area_vecs(pre_bin_n, :) = sum(saved_Ca_curves(bin_ends(1):bin_ends(2), :) );
            
        end
            
        %calculating on-area vecs
        on_area_vecs = zeros((length(on_bins)-1), 3);
        for on_bin_n = 1:(length(on_bins)-1)
            bin_ends = [on_bins(on_bin_n), on_bins(on_bin_n + 1)];
            on_area_vecs(on_bin_n, :) = sum(saved_Ca_curves(bin_ends(1):bin_ends(2), :) );
        end
        
        %calculating sus-area vecs
        sus_area_vecs = zeros((length(sus_bins)-1), 3);
        for sus_bin_n = 1:(length(sus_bins)-1)
            bin_ends = [sus_bins(sus_bin_n), sus_bins(sus_bin_n + 1)];
            sus_area_vecs(sus_bin_n, :) = sum(saved_Ca_curves(bin_ends(1):bin_ends(2), :) );
        end
        
        
        %statistical testing for sig diff in current trial
        [h1, p1] = ttest2(pre_area_vecs(:, 1), sus_area_vecs(:, 1));      %pre vs sus, Ca conv
        [h2, p2] = ttest2(pre_area_vecs(:, 2), sus_area_vecs(:, 2));      %pre vs sus, Ca spike
        [h3, p3] = ttest2(pre_area_vecs(:, 3), sus_area_vecs(:, 3));      %pre vs sus, Ca Vm
        
        sig_trs = [sig_trs; h1, h2, h3];
        
        disp(int2str(trial_n))
        keyboard
    end
end
    
%% Plotting summary analysis plots
figure(1)
plot(saved_pre_sigs(:, 1), saved_sus_sigs(:, 1), 'O', 'MarkerFaceColor', [.4, .6, .9], 'MarkerSize', 8, 'Color', [.4, .6, .9])
hold on
max_rate = max([saved_pre_sigs(:, 1); saved_sus_sigs(:, 1)]);
plot([0, max_rate], [0, max_rate], '-.', 'Color', [.75, .75, .75], 'LineWidth', 3)
sig_pts = find(sig_trs(:, 1) == 1);
plot(saved_pre_sigs(sig_pts, 1), saved_sus_sigs(sig_pts, 1), 'O', 'MarkerFaceColor', [.9, .2, .2], 'MarkerSize', 8, 'Color', [.4, .6, .9])
xlabel('mean Ca signal baseline period (AU)')
ylabel('mean Ca signal sustained period (AU)')
title('Ca-kernel convolution')
hold off

figure(2)
plot(saved_pre_sigs(:, 2), saved_sus_sigs(:, 2), 'O', 'MarkerFaceColor', [.4, .6, .9], 'MarkerSize', 8, 'Color', [.4, .6, .9])
hold on
max_rate = max([saved_pre_sigs(:, 2); saved_sus_sigs(:, 2)]);
plot([0, max_rate], [0, max_rate], '-.', 'Color', [.75, .75, .75], 'LineWidth', 3)
sig_pts = find(sig_trs(:, 2) == 1);
plot(saved_pre_sigs(sig_pts, 2), saved_sus_sigs(sig_pts, 2), 'O', 'MarkerFaceColor', [.9, .2, .2], 'MarkerSize', 8, 'Color', [.4, .6, .9])
xlabel('mean Ca signal baseline period (AU)')
ylabel('mean Ca signal sustained period (AU)')
title('Spike triggered Ca-signal injection')
hold off

figure(3)
plot(saved_pre_sigs(:, 3), saved_sus_sigs(:, 3), 'O', 'MarkerFaceColor', [.4, .6, .9], 'MarkerSize', 8, 'Color', [.4, .6, .9])
hold on
max_rate = max([saved_pre_sigs(:, 3); saved_sus_sigs(:, 3)]);
plot([0, max_rate], [0, max_rate], '-.', 'Color', [.75, .75, .75], 'LineWidth', 3)
sig_pts = find(sig_trs(:, 3) == 1);
plot(saved_pre_sigs(sig_pts, 3), saved_sus_sigs(sig_pts, 3), 'O', 'MarkerFaceColor', [.9, .2, .2], 'MarkerSize', 8, 'Color', [.4, .6, .9])
xlabel('mean Ca signal baseline period (AU)')
ylabel('mean Ca signal sustained period (AU)')
title('Scaled Vm Ca-signal injection')
hold off
       